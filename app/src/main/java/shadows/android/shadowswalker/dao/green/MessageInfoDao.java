package shadows.android.shadowswalker.dao.green;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import shadows.android.shadowswalker.db.MessageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_INFO".
*/
public class MessageInfoDao extends AbstractDao<MessageInfo, Void> {

    public static final String TABLENAME = "MESSAGE_INFO";

    /**
     * Properties of entity MessageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Message = new Property(0, String.class, "message", false, "MESSAGE");
        public final static Property FromWho = new Property(1, String.class, "fromWho", false, "FROM_WHO");
        public final static Property ReceivedDate = new Property(2, String.class, "receivedDate", false, "RECEIVED_DATE");
    }


    public MessageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public MessageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_INFO\" (" + //
                "\"MESSAGE\" TEXT," + // 0: message
                "\"FROM_WHO\" TEXT," + // 1: fromWho
                "\"RECEIVED_DATE\" TEXT);"); // 2: receivedDate
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(1, message);
        }
 
        String fromWho = entity.getFromWho();
        if (fromWho != null) {
            stmt.bindString(2, fromWho);
        }
 
        String receivedDate = entity.getReceivedDate();
        if (receivedDate != null) {
            stmt.bindString(3, receivedDate);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageInfo entity) {
        stmt.clearBindings();
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(1, message);
        }
 
        String fromWho = entity.getFromWho();
        if (fromWho != null) {
            stmt.bindString(2, fromWho);
        }
 
        String receivedDate = entity.getReceivedDate();
        if (receivedDate != null) {
            stmt.bindString(3, receivedDate);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MessageInfo readEntity(Cursor cursor, int offset) {
        MessageInfo entity = new MessageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // message
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // fromWho
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // receivedDate
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageInfo entity, int offset) {
        entity.setMessage(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFromWho(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceivedDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MessageInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MessageInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(MessageInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
